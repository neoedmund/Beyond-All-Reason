#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lflare, rflare, lwingd, lwingu, rwingd, rwingu, thrusta, thrustb, rlauncher, llauncher;

static-var gun_1, speedwings, bMoving;

// Signal definitions
#define SIG_MOVE			2

IdleHover()
{
	while(TRUE){
		while(bMoving == 1)
		{
			turn lwingd to z-axis <20.000000> speed <800>;
			turn lwingu to z-axis <0.000000> speed <800>;
			turn rwingd to z-axis <-20.000000> speed <800>;
			turn rwingu to z-axis <0.000000> speed <800>;
			sleep 25;
			turn lwingd to z-axis <0.000000> speed <800>;
			turn lwingu to z-axis <40.000000> speed <1600>;
			turn rwingd to z-axis <0.000000> speed <800>;
			turn rwingu to z-axis <-40.000000> speed <1600>;
			sleep 25;
			turn lwingd to z-axis <-25.000000> speed <1000>;
			turn lwingu to z-axis <0.000000> speed <1600>;
			turn rwingd to z-axis <25.000000> speed <1000>;
			turn rwingu to z-axis <0.000000> speed <1600>;
			sleep 25;
			turn lwingd to z-axis <0.000000> speed <1000>;
			turn lwingu to z-axis <-20.000000> speed <800>;
			turn rwingd to z-axis <0.000000> speed <1000>;
			turn rwingu to z-axis <20.000000> speed <800>;
			sleep 25;
		}
		sleep 200;
	}
}

Create()
{
	hide lflare;
	hide rflare;
	hide thrusta;
	hide thrustb;
	gun_1=0;
	speedwings=200;
	bMoving = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
	if (Stunned) {
        return (1);
    }
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	return (1);
}

QueryPrimary(piecenum)
{
	if (gun_1==0)
	{
		piecenum = lflare;
		gun_1=1;
	}
	else 
	{
		piecenum=rflare;
		gun_1=0;
	}
}

FirePrimary()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	sleep 200;
	
	start-script RestoreAfterDelay();
}

StartMoving()
{
	bMoving = 1;
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	bMoving = 0;
	turn lwingd to z-axis <0.000000> speed <50.000000>;
	turn lwingu to z-axis <0.000000> speed <50.000000>;
	turn rwingd to z-axis <0.000000> speed <50.000000>;
	turn rwingu to z-axis <0.000000> speed <50.000000>;
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

MoveRate0()
{
	bMoving = 0;
	turn lwingd to z-axis <0.000000> speed <50.000000>;
	turn lwingu to z-axis <0.000000> speed <50.000000>;
	turn rwingd to z-axis <0.000000> speed <50.000000>;
	turn rwingu to z-axis <0.000000> speed <50.000000>;
}

MoveRate1()
{
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

MoveRate2()
{
	bMoving = 1;
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

MoveRate3()
{
	bMoving = 1;
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
    explode thrustb type BITMAPONLY | NOHEATCLOUD;
    explode thrusta type BITMAPONLY | NOHEATCLOUD;
    explode rflare type BITMAPONLY | NOHEATCLOUD;
    explode lflare type BITMAPONLY | NOHEATCLOUD;
    return(corpsetype);
	return corpsetype;
}
