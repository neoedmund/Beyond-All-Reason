#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  pelvis, body, rthigh, lthigh, lleg, rleg, rfoot, lfoot, lsleeve, rsleeve, lbarrel, luparm, ruparm, 
	 rbarrel, lflare, rflare, aimx1, aimy1;

static-var  bMoving, bAiming, Static_Var_3, restore_delay, wpn1_lasthead, miniguncount, animspeed;

// Signal definitions
#define SIG_AIM				2


walk()
{
	//step 1, foot back a bit
	
	turn rthigh to x-axis <22> speed <220.000000>/animspeed;
	turn rleg to x-axis <10> speed <100.000000>/animspeed;
	turn rfoot to x-axis <-22> speed <220.000000>/animspeed;
	turn lthigh to x-axis <-45> speed <770.000000>/animspeed;
	turn lleg to x-axis <0> speed <280.000000>/animspeed;
	turn lfoot to x-axis <0> speed <510.000000>/animspeed;
	turn pelvis to z-axis <2> speed <40>/animspeed;
	move pelvis to y-axis [1] speed [10.000000]/animspeed;
	
	sleep 100*animspeed;
	
	
	//step 2, foot fully back, heel lifted
	
	
	//turn rthigh to z-axis <-2> now;
	turn rleg to x-axis <30> speed <200.000000>/animspeed;
	turn lthigh to x-axis <-60> speed <150.000000>/animspeed;
	turn lleg to x-axis <35> speed <350.000000>/animspeed;
	turn lfoot to x-axis <20> speed <200.000000>/animspeed;
	turn pelvis to z-axis <4> speed <20>/animspeed;
	move pelvis to y-axis [1] speed [20.000000]/animspeed;
	
	sleep 100*animspeed;
	
	//step 3, foot lifted, knee bent
	turn rthigh to x-axis <15> speed <70.000000>/animspeed;
	turn rleg to x-axis <0> speed <300.000000>/animspeed;
	turn rfoot to x-axis <-51> speed <290.000000>/animspeed;
	turn lthigh to x-axis <-30> speed <300.000000>/animspeed;
	turn lleg to x-axis <25> speed <100.000000>/animspeed;
	turn lfoot to x-axis <5> speed <150.000000>/animspeed;
	turn pelvis to z-axis <2> speed <20>/animspeed;
	move pelvis to y-axis [1] now;
	
	sleep 100*animspeed;
	
	//step 4 foot lifted, knee extended
	
	turn lthigh to x-axis <22> speed <520.000000>/animspeed;
	turn lleg to x-axis <10> speed <350.000000>/animspeed;
	turn lfoot to x-axis <-22> speed <270.000000>/animspeed;
	turn rthigh to x-axis <-45> speed <600.000000>/animspeed;
	turn rleg to x-axis <0> speed <10.000000>/animspeed;
	turn rfoot to x-axis <0> speed <510.000000>/animspeed;
	turn pelvis to z-axis <-2> speed <40>/animspeed;
	move pelvis to y-axis [1] speed [10.000000]/animspeed;
	
	sleep 100*animspeed;
	
	//step 5, foot on ground, knee extended
	
	
	turn lleg to x-axis <30> speed <200.000000>/animspeed;
	turn rthigh to x-axis <-60> speed <150.000000>/animspeed;
	turn rleg to x-axis <35> speed <350.000000>/animspeed;
	turn rfoot to x-axis <20> speed <200.000000>/animspeed;
	turn pelvis to z-axis <-4> speed <20>/animspeed;
	move pelvis to y-axis [1] speed [20.000000]/animspeed;
	
	sleep 100*animspeed;
	
	turn lthigh to x-axis <15> speed <70.000000>/animspeed;
	turn lleg to x-axis <0> speed <300.000000>/animspeed;
	turn lfoot to x-axis <-51> speed <290.000000>/animspeed;
	turn rthigh to x-axis <-30> speed <300.000000>/animspeed;
	turn rleg to x-axis <25> speed <100.000000>/animspeed;
	turn rfoot to x-axis <5> speed <150.000000>/animspeed;
	turn pelvis to z-axis <-2> speed <20>/animspeed;
	
	sleep 100*animspeed;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walklegs()
{
	//step 1, foot back a bit
	
	turn rthigh to z-axis <-2> speed <20.000000>/animspeed;
	turn rthigh to x-axis <22> speed <220.000000>/animspeed;
	turn rleg to x-axis <1> speed <10.000000>/animspeed;
	turn rfoot to x-axis <-23> speed <230.000000>/animspeed;
	
	turn lthigh to z-axis <2> speed <20.000000>/animspeed;
	turn lthigh to x-axis <-42> speed <740.000000>/animspeed;
	turn lleg to x-axis <-22> speed <500.000000>/animspeed;
	turn lfoot to x-axis <14> speed <650.000000>/animspeed;
	move pelvis to y-axis [1] speed [10.000000]/animspeed;
	
	sleep 100*animspeed;
	
	
	//step 2, foot fully back, heel lifted
	
	
	//turn rthigh to z-axis <-2> now;
	turn rthigh to x-axis <34> speed <120.000000>/animspeed;
	turn rleg to x-axis <23> speed <220.000000>/animspeed;
	turn rfoot to x-axis <-32> speed <90.000000>/animspeed;
	
	turn lthigh to x-axis <10> speed <520.000000>/animspeed;
	turn lleg to x-axis <-48> speed <260.000000>/animspeed;
	turn lfoot to x-axis <43> speed <290.000000>/animspeed;
	move pelvis to y-axis [0] speed [10.000000]/animspeed;
	
	sleep 100*animspeed;
	
	//step 3, foot lifted, knee bent
	
	turn rthigh to z-axis <0> speed <20.000000>/animspeed;
	turn rthigh to x-axis <16> speed <180.000000>/animspeed;
	turn rleg to x-axis <28> speed <50.000000>/animspeed;
	turn rfoot to x-axis <-51> speed <190.000000>/animspeed;
	
	turn lthigh to z-axis <0> speed <20.000000>/animspeed;
	turn lthigh to x-axis <0> speed <100.000000>/animspeed;
	turn lleg to x-axis <0> speed <480.000000>/animspeed;
	turn lfoot to x-axis <0> speed <430.000000>/animspeed;
	move pelvis to y-axis [0] now;
	
	sleep 100*animspeed;
	
	//step 4 foot lifted, knee extended
	
	turn rthigh to z-axis <2> speed <20.000000>/animspeed;
	turn rthigh to x-axis <-21> speed <370.000000>/animspeed;
	turn rleg to x-axis <-22> speed <500.000000>/animspeed;
	turn rfoot to x-axis <14> speed <650.000000>/animspeed;
	
	turn lthigh to z-axis <-2> speed <20.000000>/animspeed;
	turn lthigh to x-axis <44> speed <440.000000>/animspeed;
	turn lleg to x-axis <1> speed <10.000000>/animspeed;
	turn lfoot to x-axis <-23> speed <230.000000>/animspeed;
	move pelvis to y-axis [1] speed [10.000000]/animspeed;
	
	sleep 100*animspeed;
	
	//step 5, foot on ground, knee extended
	
	
	// turn rthigh to z-axis <5> now;
	turn rthigh to x-axis <5> speed <260.000000>/animspeed;
	turn rleg to x-axis <-48> speed <260.000000>/animspeed;
	turn rfoot to x-axis <43> speed <290.000000>/animspeed;
	
	//turn lthigh to z-axis <-2> now;
	turn lthigh to x-axis <68> speed <240.000000>/animspeed;
	turn lleg to x-axis <23> speed <220.000000>/animspeed;
	turn lfoot to x-axis <-32> speed <90.000000>/animspeed;
	move pelvis to y-axis [0] speed [10.000000]/animspeed;
	
	sleep 100*animspeed;
	
	//Step 0, all back to default
	
	turn rthigh to z-axis <0> speed <20.000000>/animspeed;
	turn rthigh to x-axis <0> speed <50.000000>/animspeed;
	turn rleg to x-axis <0> speed <480.000000>/animspeed;
	turn rfoot to x-axis <0> speed <430.000000>/animspeed;
	
	turn lthigh to z-axis <0> speed <20.000000>/animspeed;
	turn lthigh to x-axis <32> speed <360.000000>/animspeed;
	turn lleg to x-axis <28> speed <50.000000>/animspeed;
	turn lfoot to x-axis <-51> speed <190.000000>/animspeed;
	move pelvis to y-axis [0] now;
	
	sleep 100*animspeed;

}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walk();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
						
				turn rthigh to z-axis <0> speed <20.000000>;
				turn rthigh to x-axis <0> speed <50.000000>;
				turn rleg to x-axis <0> speed <480.000000>;
				turn rfoot to x-axis <0> speed <430.000000>;
						
				turn lthigh to z-axis <0> speed <20.000000>;
				turn lthigh to x-axis <0> speed <100.000000>;
				turn lleg to x-axis <0> speed <480.000000>;
				turn lfoot to x-axis <0> speed <430.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}


#define BASEPIECE pelvis
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 100

Create()
{
	hide lflare;
	hide rflare;
	hide aimx1;
	hide aimy1;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	miniguncount = 0;
	restore_delay = 3000;
	animspeed = 2.5;
	turn rsleeve to y-axis <5> now;
	turn lsleeve to y-axis <-5> now;
	start-script MotionControl();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 3000;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn body to y-axis <0.000000> speed <120.000000>;
	turn luparm to x-axis <0.000000> speed <120.000000>;
	turn ruparm to x-axis <0.000000> speed <120.000000>;
	spin rbarrel around z-axis speed <0.000000>;
	spin lbarrel around z-axis speed <0.000000>;
	bAiming = FALSE;
	wpn1_lasthead = 1000000;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	bAiming = TRUE;
	turn body to y-axis heading speed <180.000000>;
	turn luparm to x-axis 0 - pitch speed <360>;
	turn ruparm to x-axis 0 - pitch speed <360>;
	while( !Static_Var_3 )
	{
		return(0);
	}
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn body around y-axis;
		wait-for-turn luparm around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( miniguncount == 0)
	{
		emit-sfx 1024 + 0 from rflare;
		miniguncount = 3;
	}
	if( miniguncount == 1)
	{	
		emit-sfx 1024 + 0 from lflare;
		miniguncount = 2;
	}
	miniguncount = miniguncount - 2;
	spin rbarrel around z-axis speed <900.000000>;
	spin lbarrel around z-axis speed <-900.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

QueryPrimary(piecenum)
{
	if( miniguncount == 0)
	{
		piecenum = rflare;
	}
	if( miniguncount == 1)
	{
		piecenum = lflare;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rthigh type BITMAPONLY | NOHEATCLOUD;
		explode rleg type BITMAPONLY | NOHEATCLOUD;
		explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type BITMAPONLY | NOHEATCLOUD;
		//explode lleg type BITMAPONLY | NOHEATCLOUD;
		explode lfoot type BITMAPONLY | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		//explode lturret type BITMAPONLY | NOHEATCLOUD;
		//explode lbarrel type BITMAPONLY | NOHEATCLOUD;
		//explode lflare type BITMAPONLY | NOHEATCLOUD;
		//explode rturret type BITMAPONLY | NOHEATCLOUD;
		//explode rbarrel type BITMAPONLY | NOHEATCLOUD;
		//explode rflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rthigh type FALL | NOHEATCLOUD;
		explode rleg type FALL | NOHEATCLOUD;
		explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type FALL | NOHEATCLOUD;
		explode lleg type FALL | NOHEATCLOUD;
		explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type FALL | NOHEATCLOUD;
		//explode rturret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type SMOKE | FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		//explode lbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode rbarrel type SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
