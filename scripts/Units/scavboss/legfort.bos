#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, thrustrr, thrustrl, thrustfr, thrustfl, thrustrra, thrustrla, thrustfra, thrustfla, radar,
	   turret, sleeve, barrel1, flare1, barrel2, flare2, barrel3, flare3, turretr, sleevesr, barrel1r, flare1r, barrel2r, flare2r,
	   turretl, sleevesl, barrel1l, flare1l, barrel2l, flare2l;
       

static-var  restore_delay, v1, gun_1, gun_2, gun_3;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base

Create()
{
	hide thrustrra;
	hide thrustfra;
	hide thrustrla;
	hide thrustfla;
	hide flare1l;
	hide flare1r;
	hide flare2l;
	hide flare2r;
	hide flare1;
	hide flare2;
	hide flare3;
	
	turn thrustrra to x-axis <-90> now; 
	turn thrustfra to x-axis <-90> now; 
	turn thrustrla to x-axis <-90> now; 
	turn thrustfla to x-axis <-90> now; 
	spin radar around y-axis speed <60.000000>;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	sleep 1500;
}

Activate()
{
	show thrustrra;
	show thrustfra;
	show thrustrla;
	show thrustfla;
}

Deactivate()
{
	hide thrustrra;
	hide thrustfra;
	hide thrustrla;
	hide thrustfla;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare3;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare2r;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare1r;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare2r;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare2l;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare1l;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare2l;
	}
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn base to y-axis <0.000000> speed <250.000000>;
	turn base to x-axis <0.000000> speed <250.000000>;
	turn turret to z-axis <0> speed <250>;
	turn sleeve to x-axis <0> speed <250>;

	turn turretl to y-axis <0> speed <250>;
	turn sleevesl to z-axis <0> speed <250>;

	turn turretr to y-axis <0> speed <250>;
	turn sleevesr to z-axis <0> speed <250>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving()
{
	sleep 1000;
}

StopMoving()
{
}

MoveRate0()
{
	turn thrustrr to x-axis <0.000000> speed <80.000000>;
	turn thrustrl to x-axis <0.000000> speed <80.000000>;
	turn thrustfr to x-axis <0.000000> speed <80.000000>;
	turn thrustfl to x-axis <0.000000> speed <80.000000>;
}

MoveRate1()
{
	turn thrustrr to x-axis <8.000000> speed <60.000000>;
	turn thrustrl to x-axis <8.000000> speed <60.000000>;
	turn thrustfr to x-axis <8.000000> speed <60.000000>;
	turn thrustfl to x-axis <8.000000> speed <60.000000>;
}

MoveRate2()
{
	turn thrustrr to x-axis <18.000000> speed <45.000000>;
	turn thrustrl to x-axis <18.000000> speed <45.000000>;
	turn thrustfr to x-axis <18.000000> speed <45.000000>;
	turn thrustfl to x-axis <18.000000> speed <45.000000>;
}

MoveRate3()
{
	turn thrustrr to x-axis <0.000000> speed <70.000000>;
	turn thrustrl to x-axis <0.000000> speed <70.000000>;
	turn thrustfr to x-axis <0.000000> speed <70.000000>;
	turn thrustfl to x-axis <0.000000> speed <70.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70>;
	turn sleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	var aimto;
	var aimsl;
	aimto= <90> + heading;
	if (aimto > <90>) {
		aimto = <90>;
	}
	if (aimto < <-90>) {
		aimto = <-90>;
	}
	aimsl = 2 * aimto / 3;
	if (aimto < <0>){
		aimsl = -2 * aimto / 3;
	}
	turn sleevesr to z-axis pitch - aimsl speed <200.000000>;
	turn turretr to x-axis -1*aimto speed <200.000000>;
	wait-for-turn sleevesr around z-axis;
	wait-for-turn turretr around x-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	var aimto;
	var aimsl;
	aimto= <-90> + heading;
	if (aimto > <90>) {
		aimto = <90>;
	}
	if (aimto < <-90>) {
		aimto = <-90>;
	}
	aimsl = 2 * aimto / 3;
	if (aimto < <0>){
		aimsl = -2 * aimto / 3;
	}
	turn sleevesl to z-axis -1*pitch + aimsl speed <200.000000>;
	turn turretl to x-axis aimto speed <200.000000>;
	wait-for-turn sleevesl around z-axis;
	wait-for-turn turretl around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-3.001648] now;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [1.000549];
	}
	if( gun_1 == 2 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-3.001648] now;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [1.000549];
	}
	if( gun_1 == 3 )
	{
	    gun_1 = 0;
		emit-sfx 1024 + 0 from flare3;
		move barrel3 to z-axis [-3.001648] now;
		sleep 100;
		move barrel3 to z-axis [0.000000] speed [1.000549];
	}
	++gun_1;
}

FireSecondary()
{
	if( gun_2 == 1 )
	{
	    emit-sfx 1024 + 0 from flare1r;
		move barrel1r to x-axis [-3.001648] now;
		sleep 100;
		move barrel1r to x-axis [0.000000] speed [2];
	}
	if( gun_2 == 2 )
	{
	    gun_2 = 0;
		emit-sfx 1024 + 0 from flare2r;
		move barrel2r to x-axis [-3.001648] now;
		sleep 100;
		move barrel2r to x-axis [0.000000] speed [2];
	}
	++gun_2;
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
	    emit-sfx 1024 + 0 from flare1l;
		move barrel1l to x-axis [3.001648] now;
		sleep 100;
		move barrel1l to x-axis [0.000000] speed [2];
	}
	if( gun_3 == 2 )
	{
	    gun_3 = 0;
		emit-sfx 1024 + 0 from flare2l;
		move barrel2l to x-axis [3.001648] now;
		sleep 100;
		move barrel2l to x-axis [0.000000] speed [2];
	}
	++gun_3;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turretr;
}

AimFromTertiary(piecenum)
{
	piecenum = turretl;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode sleevesr type BITMAPONLY | NOHEATCLOUD;
		explode barrel1r type BITMAPONLY | NOHEATCLOUD;
		explode flare1r type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode sleevesl type BITMAPONLY | NOHEATCLOUD;
		explode barrel1l type BITMAPONLY | NOHEATCLOUD;
		explode flare1l type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode turretr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevesr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1r type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1r type BITMAPONLY | NOHEATCLOUD;
		explode turretl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevesl type FALL | NOHEATCLOUD;
		explode barrel1l type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1l type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode turretr type SMOKE | FALL | NOHEATCLOUD;
		explode sleevesr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1r type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1r type BITMAPONLY | NOHEATCLOUD;
		explode turretl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleevesl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1l type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare1l type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevesr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1r type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1r type BITMAPONLY | NOHEATCLOUD;
		explode turretl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleevesl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel1l type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1l type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
